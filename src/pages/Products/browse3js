import './Products.css'
import logo from '../../images/logo.png'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faStar } from '@fortawesome/free-solid-svg-icons';
import { Link, useLocation } from 'react-router-dom';
import ProductCard from '../../components/ProductCard/ProductCard';
import { useState, useEffect } from 'react'
import Loader from '../../components/Loader/Loader'
import { useItemsContext } from '../../hooks/useItemsContext'
import { Icon } from '@iconify/react';
import { useAuthContext } from '../../hooks/useAuthContext';

// import { useLanguage } from '../../context/languageContext';







const condition = ({ text, status, onChange }) => {
    return (
        <div className="CategoriesCheckbox">
            <input
                id={text}
                className="CheckBoxInput"
                type="checkbox"
                checked={status}
                onChange={() => onChange(text)}
            />
            <label htmlFor={text} className="CheckBoxLabel">
                {/* <span className="CheckBoxSpan"></span> */}
                {!status && <span className="CheckBoxSpan"></span>}

                <div className="CheckBoxText">{text}</div>
            </label>
        </div>
    );
};


const donation = ({ text }) => {
    return (
        <div className="CategoriesCheckbox">
            <input id={text} className="CheckBoxInput" type="checkbox" />
            <label for={text} className="CheckBoxLabel">
                <span className="CheckBoxSpan"></span>
                <div className="CheckBoxText">{text}</div>
            </label>
        </div>
    )
}

const Browse = ({ api, languageText }) => {

    const [loading, setLoading] = useState(true)
    const [error, setError] = useState(false)
    const { user } = useAuthContext()
    const { products, dispatch } = useItemsContext()
    const [selectedCategory, setSelectedCategory] = useState('');
    const [selectedCategories, setSelectedCategories] = useState([]);
    const [selectedConditions, setSelectedConditions] = useState([]);
    useEffect(() => {
        const fetchItems = async () => {
            try {
                const response = await fetch(`${api}/api/products`, {
                    headers: {
                        'Authorization': `Bearer ${user.token}`
                    }
                });
                if (!response.ok) {
                    console.error(`Error fetching Items. Status: ${response.status}, ${response.statusText}`);
                    setError('Failed to fetch data');
                    return;
                }
                const json = await response.json();
                const filteredJson = json.filter((product) => product.userID !== user.userId);
                dispatch({
                    type: 'SET_ITEM',
                    collection: "products",
                    payload: filteredJson,
                });
                setLoading(false);
            } catch (error) {
                console.error('An error occurred while fetching data:', error);
                setError('An error occurred while fetching data');
            }
        };

        if (user) {
            fetchItems();
        }
    }, [dispatch, user]);



    const handleCategoriesChange = (e) => {
        const selectedCategory = e.target.value;
        console.log('Selected Category:', selectedCategory);
        console.log('Selected Category:', selectedCategories);
        setSelectedCategory(selectedCategory === '' ? 'all' : selectedCategory);
        if (selectedCategory === '') {
            // If "All Categories" is selected, clear the selected categories
            setSelectedCategories([]);
            const select = document.getElementById('categoryFilter');
            const options = select.options;
            for (let i = 0; i < options.length; i++) {
                options[i].classList.remove('selected-option');
            }
        } else {
            setSelectedCategories((prevSelectedCategories) => {
                if (prevSelectedCategories.includes(selectedCategory)) {
                    // Remove category if already selected
                    return prevSelectedCategories.filter((category) => category !== selectedCategory);
                } else {
                    // Add category if not already selected
                    return [...prevSelectedCategories, selectedCategory];
                }
            });
        }



        const select = e.target;
        const selectedOption = select.options[select.selectedIndex];
        selectedOption.classList.add('selected-option');
    };
    const renderSelectedCategories = () => {
        if (selectedCategories.length === 0) {
            return <p style={{ display: 'none' }}></p>;
        }

        return (
            <div className="selectedCategories">
                {/* <p>Selected Categories:</p> */}
                <div className="rowCategories">
                    {selectedCategories.map((category) => (
                        <div key={category}> • {category}</div>
                    ))}
                </div>
            </div>
        );
    };


    const handleConditionChange = (condition) => {
        if (condition === languageText.AllConditions) {
            setSelectedConditions([]);
        } else {
            const index = selectedConditions.indexOf(condition);
            if (index === -1) {
                setSelectedConditions([...selectedConditions, condition]);
            } else {
                setSelectedConditions(selectedConditions.filter((cond) => cond !== condition));
            }
        }
    };


    const categoryOptions = [
        {
            value: '',
            label: languageText.AllCategories
        },
        {
            value: 'Men\'s  Clothing',
            label: languageText.MenClothing
        },
        {
            value: 'Women\'s  Clothing',
            label: languageText.WomenClothing
        },
        {
            value: 'Food & Beverages',
            label: languageText.FoodBeverages
        },
        {
            value: 'Other Technology',
            label: languageText.OtherTechnology
        },

    ];



    const filterProductsByCategoryAndCondition = (product) => {
        // const categoryFilter = selectedCategories.length === 0 || product.pCategory.some((category) => selectedCategories.includes(category));
        const conditionFilter = selectedConditions.length === 0 || selectedConditions.includes(product.pCondition);
        // const categoryFilter = selectedCategories.length === 0 || (product.pCategory && product.pCategory.some((category) => selectedCategories.includes(category)))
        const categoryFilter = selectedCategories.length === 0 || (
            product.pCategory && selectedCategories.every((category) => product.pCategory.includes(category))
        );
        return categoryFilter && conditionFilter;
    };

    return (

        <div className="Browse">
            {loading ? (
                <div className="Loader">
                    <Loader />
                    <p className="LoaderText">{languageText.Loading}</p>
                </div>
            ) : (<>
                <h2>{languageText.BrowseProducts}</h2>
                <div className="AllBrowse">
                    <div className="LeftSide">
                        <div className="Categories">
                            <div className="categoryFilter">
                                <select
                                    id="categoryFilter"
                                    value={selectedCategory}
                                    onChange={handleCategoriesChange}
                                    className={selectedCategory ? 'selected' : ''}
                                >


                                    {categoryOptions.map((option) => (
                                        <option
                                            key={option.value}
                                            value={option.value}
                                        >
                                            {selectedCategories.includes(option.value) && (
                                                <div className="checkIcon">✓ </div>
                                            )}
                                            {option.label}

                                        </option>
                                    ))}
                                </select>
                            </div>
                        </div>

                        <div className="Categories">
                            {/* <p>Condition</p> */}
                            <p>{languageText.Condition}</p>

                            {condition({ text: languageText.AllConditions, status: selectedConditions.includes(languageText.AllConditions), onChange: handleConditionChange })}
                            {condition({ text: languageText.BrandNew, status: selectedConditions.includes(languageText.BrandNew), onChange: handleConditionChange })}
                            {condition({ text: languageText.New, status: selectedConditions.includes(languageText.New), onChange: handleConditionChange })}
                            {condition({ text: languageText.Used, status: selectedConditions.includes(languageText.Used), onChange: handleConditionChange })}
                        </div>
                        <div className="Categories Donation">
                            <p>{languageText.Donations}</p>

                            {donation({ text: languageText.Donations })}
                        </div>
                    </div>
                    <div className="RightSide">
                        {/* {products && products.filter(filterProductsByCategory && filterProductsByCondition).map((product) => ( */}
                        {products && products.filter(filterProductsByCategoryAndCondition).map((product) => (
                            <ProductCard key={product._id} edit={false} product={product} />

                        ))}


                    </div>
                </div>
                {error && <div className="ErrorMessage"><Icon icon="ooui:error" />{error}</div>}
            </>
            )}
        </div>
    );
}

export default Browse;